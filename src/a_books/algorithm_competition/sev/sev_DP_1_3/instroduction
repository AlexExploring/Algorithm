最长公共子串
for(int i=1; i<=s1.length(); i++){
            for(int j=1; j<=s2.length(); j++){
                if(c1[i-1]==c2[j-1]) {
                    a[i][j] = a[i-1][j-1]+1;  //填空
                    if(a[i][j] > max) max = a[i][j];
                }
            }
        }
最长公共子序列

for (int i = 1; i <= s1.length(); i++) {
            for (int j = 1; j <= s2.length(); j++) {
                if (s2.charAt(j-1)==s1.charAt(i-1))
                    dp[i][j] = dp[i-1][j-1]+1;
                else
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
最长递增子序列

1.
int ans = 1;
        int [] dp = new int[n+1];
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            int max = 0;
            for (int j = 1; j < i; j++) {
                if (dp[j]>max&&high[j]<high[i])
                    max = dp[j];
                dp[i] = max+1;
                if (dp[i]>ans) ans = dp[i];
            }
        }
        return ans;


2.
维护一个上升数组