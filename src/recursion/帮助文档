用递归的方法做题，我觉得最重要的就是找出   这个函数与下一个函数之间的关系  以及  一个函数体结束的临界条件（即递归的结束）。
    例如就本题而言,
1.第一步先找这个函数与下一个函数之间的关系：
假如有n个台阶，跳上一个n级的台阶的跳法总数为f(n).
我们在跳的过程中，每一次有两种跳法，即跳一个或两个台阶。
第一种跳法：第一次我跳了一个台阶，那么还剩下n-1个台阶还没跳，剩下的n-1个台阶的跳法有f(n-1)种。或者用
第二种跳法：第一次跳了两个台阶，那么还剩下n-2个台阶还没，剩下的n-2个台阶的跳法有f(n-2)种。
由此不难得出递归公式：f(n) = (n-1) + f(n-2);

2.第二步，找出递归的结束条件
    当n <= 0时，跳法为0，即此时f(n) = 0
    当只剩下一个台阶n = 1时，那么只有一种跳法，即f(1) = 1;
    当n = 2时，此时跳法为2种，即f(2) = 2;



有关递归的一些优化思路
1. 考虑是否重复计算
2. 考虑是否可以自底向上
对于递归的问题，我们一般都是从上往下递归的，直到递归到最底，再一层一层着把值返回。
不过，有时候当 n 比较大的时候，例如当 n = 10000 时，那么必须要往下递归10000层直到 n <=1 才将结果慢慢返回，
如果n太大的话，可能栈空间会不够用。
对于这种情况，其实我们是可以考虑自底向上的做法的。例如我知道
f(1) = 1;
f(2) = 2;
那么我们就可以推出 f(3) = f(2) + f(1) = 3。从而可以推出f(4),f(5)等直到f(n)。